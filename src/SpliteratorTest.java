public class SpliteratorTest {
	// 병렬 스트림(Parallel Stream)
	// 각각의 스레드에서 처리할 수 있도록 스트림 요소를 여러 청크로 분할한 스트림
	// 모든 멀티코어 프로세서가 각각의 청크를 처리하도록 할당
	// 병렬 스트림은 내부적으로 ForkJoinPool을 사용한다.

	// 반복형, 순차 리듀싱, 병렬 리듀싱 어떤게 빠른지는 Test해보기

	// 확신이 서지 않는다면 직접 측정하기
	// 박싱을 주의하라 Auto Boxing과 unboxing은 성능을 크게 저하시킬 수 있는 요인
	// 순차 스트림보다 병렬 스트림에서 성능이 떨어지는 연산 : limit, findFirst
	// 스트림에서 수행하는 전체 파이프라인 연산 비용을 고려하라
	// 소량의 데이터에서는 병렬 스트림이 도움 되지 않는다
	// 스트림을 구성하는 자료구조가 적절한지 확인하라
	// 스트림의 특성과 파이프라인의 중간 연산이 스트림의 특성을 어떻게 바꾸는지에 따라 분해 과정의 성능이 달라질 수 있다
	// 최종 연산의 병합 과정 비용을 살펴보라

	// ForkJoin Framework
	// divide and conquer
	// join 메서드를 테스크에 호출하면 태스크가 생산하는 결과가 준비될 때까지 호출자를 블록시킨다 따라서 두 서브태스크가 모두 시작된 다음에 join을 호출해야 한다
	// RecursiveTask 내에서는 Forkjoinpool의 invok 메서드를 사용하지 말아야 한다 대신 compute, fork 메서드를 직접 호출할 수 있다
	// 무조건 빠를 거라는 생각은 버리기

}
